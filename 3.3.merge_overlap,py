import numpy as np

import argparse
import subprocess

parser = argparse.ArgumentParser(description="Merge overlap for selective region in xpclr result")

parser.add_argument('--input', '-i', type=str, required=True, help="Input selected region xpclr result file name (e.g. broomcorn_win20k_2k.xpclr_selected_region.txt")
parser.add_argument('--output', '-o', type=str, required=True, help="Ouput file for merge overlap fst result (e.g. merged_broomcorn_win20k_2k.xpclr_selected_region.txt")

args = parser.parse_args()

file = open(args.input, 'r')
out = open(args.output, 'w')

dic = {}
for line in file:
    if line.startswith("id"):
        out.write('chr\tpos_start\tpos_end\tmean_xpclr\n')
    else:
        _line = line.rstrip().split('\t')
        if len(_line) == 13:
            if _line[1] not in dic:
                dic[_line[1]] = []
            dic[_line[1]].append([_line[4], _line[5], _line[11]])

for chrom in dic:
    xpclr = dic[chrom]
    merged_intervals = []
    current_interval = xpclr[0]
    print(current_interval)  # 当前

    xpclr_value = [float(current_interval[2])]

    for p in range(1, len(xpclr)):
        prev_start, prev_end = int(current_interval[0]), int(current_interval[1])
        curr_start, curr_end = int(xpclr[p][0]), int(xpclr[p][1])
        
        if curr_start <= prev_end:  # 区间有重叠，进行合并
            current_interval[1] = str(max(prev_end, curr_end))  # 更新区间结束的位置
            #current_interval[4] = str((float(current_interval[4]) + float(fst[p][4])) / 2)  # 更新Fst值，取平均
            xpclr_value.append(float(xpclr[p][2]))

        else:
            # 不重叠时计算当前区间中的xpclr均值
            current_interval[2] = str(round(sum(xpclr_value) / len(xpclr_value), 3))

            # 将不重叠的区间添加到merged_intervals
            merged_intervals.append(current_interval)

            # 将当前的 current_interval 更新为新的区间，
            # 也就是下一行的区间 fst[p]，准备在接下来的迭代中检查这个新的区间是否与后面的区间有重叠。
            current_interval = xpclr[p]
            print(current_interval)  # 更新后

            # 重置xpclr列表
            xpclr_value = [float(current_interval[2])]

    # 处理最后一个区间
    if xpclr_value:
        current_interval[2] = str(round(np.sum(xpclr_value) / len(xpclr_value), 3))
        merged_intervals.append(current_interval)

    for interval in merged_intervals:
        out.write(chrom + '\t' + '\t'.join(interval) + '\n')

file.close()
out.close()
